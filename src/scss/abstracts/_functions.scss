@use "sass:math";
@use "sass:map";
@use "sass:meta";
@use "variables/colors" as *;

// --------------------------------------------------------------------------
// Type

@function is-type($data) {
  @return meta.type-of($data);
}

@function is-null($data) {
  @return is-type($data) == "null";
}

@function is-number($data) {
  @return is-type($data) == "number";
}

@function is-string($data) {
  @return is-type($data) == "string";
}

@function is-color($data) {
  @return is-type($data) == "color";
}

@function is-bool($data) {
  @return is-type($data) == "bool";
}

@function is-list($data) {
  @return is-type($data) == "list";
}

@function is-map($data) {
  @return is-type($data) == "map";
}

// --------------------------------------------------------------------------
// Color

@function get-color($map, $level) {
  @return map.get($map, $level);
}

@function get-red($level) {
  @return get-color($red, $level);
}

@function get-gray($level) {
  @return get-color($gray, $level);
}

@function get-green($level) {
  @return get-color($green, $level);
}

@function get-blue($level) {
  @return get-color($blue, $level);
}

// --------------------------------------------------------------------------
// Units

@function get-base-rem-size-percentage($base-px-size) {
  @return math.div(remove-unit($base-px-size), 16) * 100%;
}

@function rem($unit, $base: 16) {
  @return math.div(remove-unit($unit), remove-unit($base)) * 1rem;
}

@function em($unit, $base: 16) {
  @return math.div(remove-unit($unit), remove-unit($base)) * 1em;
}

@function get-unit($value) {
  @return math.unit($value);
}

@function has-unit($value) {
  @return get-unit($value) != "";
}

@function remove-unit($unit) {
  @return math.div($unit, $unit * 0 + 1);
}
